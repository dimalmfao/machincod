#ifndef _PARSER_H
#define _PARSER_H

#include // 
#include //
#include //
#include //

//Token types 
typedef enum{
    TOKEN_EOF,
    TOKEN_INDENTIFIER,
    TOKEN_NUMBER,
    TOKEN_NUMBER,
    TOKEN_STRING,
    TOKEN_KEYWORD,
    TOKEN_OPERATOR,
    TOKEN_PUNCTUATOR,
    TOKEN_ERROR,
} TokenType;

//AST Node types
typedef enum {
    NODE_PROGRAM,
    NODE_FUNCTION,
    NODE_STATEMENT,
    NODE_EXPRESSION,
    NODE_VARIABLE,
    NODE_LITERAL,
    NODE_OPERATOR,
} NodeType;

// Operator types
typedef enum {
    OP_ADD,
    OP_SUB,
    OP_MUL,
    OP_DIV,
    OP_ASSING,
    OP_EQ,
    OP_NE,
    OP_LT,
    OP_GT,
} OperatorType:

// Expression types
typedef enum {
    EXPR_BINARY,
    EXPR_UNARY,
    EXPR_LITERAL,
    EXPR_IDENTIFIER,
} StatementType;

// AST Node sturcture
typedef struct ASTNode {
    NodeType node_type;
    union{
        sturct{
            StatementType stmt_type;
            struct ASTNode *expression
            struct ASTNode *body;
            struct ASTNode *else_body;
        } statement;

        struct {
            ExpressionType expr_type;
            OperatorType op;
            struct ASTNode *left;
            struct ASTNode *right;
        } expressions;

        struct {
            chat *name;
            struct ASTNode *paramgs;
            struct ASTNode *body;
        } function;

        struct {
            char *value;
        } literal;

        struct {
            chat *name;
        } variable;
    };
} ASTNode;

//Parser structure
typedef struct {
    const char *source;
    size_t pos;
    size_t lenght;
    TOkenType current_token;
    char token_value[256];
    int has_error;
} Parser;

//Lexer functions 
TokenType next_token(Parser *parser);
const char *token_type_to_str(TokenType type);

//Parser functions
ASTNode *parse_program(Parser *parser);
ASTNode *parse_function(Parser *parser);
ASTNode *parse_statement(Parser *parser);
ASTNode *parse_expression(Parser *parser)
ASTNode *parse_primary(Parser *parser);

//AST functions
ASTNode *create_ast_node(NodeType type);
void free_ast(ASTNode *node);
void print_ast(ASTNode *node);

// Error handling
void parser_error(Parser *parser, const char *message);

//Utility functionbs
void skip_whitespace(Parser *parser)
int except(Parser *parser, TokenType type);

extern Parser_t *Parser_g;

#endif
